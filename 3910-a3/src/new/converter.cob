IDENTIFICATION DIVISION.
PROGRAM-ID. CONVERTER.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
*>FILE-CONTROL.
*>SELECT IFILE ASSIGN TO FILENAME_IN
*>FILE STATUS IS WS-STATUS-IN.
FILE-CONTROL.
    SELECT STANDARD-INPUT ASSIGN TO KEYBOARD.
    SELECT STANDARD-OUTPUT ASSIGN TO DISPLAY.
    SELECT INPUT-FILE
   ASSIGN TO INPUT-FILE-NAME
   ORGANIZATION IS LINE SEQUENTIAL.
DATA DIVISION.
FILE SECTION.
FD STANDARD-INPUT.
    01 STDIN-RECORD   PICTURE X(80).
FD STANDARD-OUTPUT.
    01 STDOUT-RECORD  PICTURE X(80).
FD  INPUT-FILE.
01  INPUT-RECORD PIC X(20).
WORKING-STORAGE SECTION.
01 WS-EOF PIC A(1).
77 GET-LINE	PIC X(30) VALUE " ". 
77 IN-LINE	PIC X(30).
01 FORMATTED-INTEGER	PIC Z(04)9.
77 SUMM PIC 9(10).
77 ISFILE PIC 9(1) VALUE 0.
77 GOOD PIC 9(1) VALUE 0.
01 PREV PIC X(1).
77 I    PICTURE S99 USAGE IS COMPUTATIONAL.
01 W-SUB               PIC 9(2) VALUE 0.              
01 S-ALPHABET-FOUND    PIC X(1) VALUE 'N'.   
01 INPUT-FILE-NAME PIC X(64) VALUE ' '.

PROCEDURE DIVISION.

OPEN INPUT STANDARD-INPUT, OUTPUT STANDARD-OUTPUT
	*>Prompt user for input
	DISPLAY " "
	DISPLAY "Enter a filename with a '.' and it will read the file"
	DISPLAY "Otherwise, enter a roman numeral to be converted"
	DISPLAY "	  ROMAN NUMERALS CONVERTER"
	DISPLAY "-----------------    -----------------------"
	DISPLAY "Roman Numerals		    Decimal Numbers"
	PERFORM UNTIL IN-LINE IS EQUAL TO "Q"
		*>Reset for the loop
		MOVE 0 TO W-SUB
		MOVE 0 TO ISFILE
		MOVE 'N' TO S-ALPHABET-FOUND
		MOVE 0 TO SUMM
		MOVE " " TO GET-LINE 
		MOVE " " TO IN-LINE
		READ STANDARD-INPUT INTO GET-LINE
		*> STRLEN
		PERFORM VARYING W-SUB FROM 30 BY -1 UNTIL W-SUB < 1 
		         OR S-ALPHABET-FOUND = 'Y'           
		         IF GET-LINE (W-SUB : 1) NOT = SPACE                
		            MOVE 'Y'   TO S-ALPHABET-FOUND                          
		         END-IF                                    
		END-PERFORM

		*> SEE IF ITS A FILE
		PERFORM VARYING I FROM 1 BY 1 UNTIL I IS GREATER THAN W-SUB + 1
			IF GET-LINE(I:1) IS EQUAL TO '.'
				MOVE 1 TO ISFILE
			END-IF
		END-PERFORM
		*>File Case
			IF ISFILE IS EQUAL TO 1
				MOVE 0 TO W-SUB
				MOVE 'N' TO S-ALPHABET-FOUND
				MOVE 0 TO SUMM
				MOVE " " TO IN-LINE
				MOVE 'N' TO WS-EOF
				MOVE GET-LINE TO INPUT-FILE-NAME
				OPEN INPUT INPUT-FILE

				*>For loop untill EOF
				PERFORM UNTIL WS-EOF='Y'
				MOVE 0 TO W-SUB
				MOVE 'N' TO S-ALPHABET-FOUND
	         	READ INPUT-FILE INTO INPUT-RECORD
	            AT END MOVE 'Y' TO WS-EOF
	            NOT AT END
				MOVE INPUT-RECORD TO GET-LINE
				
				*>Strlen
				PERFORM VARYING W-SUB FROM 30 BY -1 UNTIL W-SUB < 1 
		         OR S-ALPHABET-FOUND = 'Y'           
		         	IF GET-LINE (W-SUB : 1) NOT = SPACE                
		            	MOVE 'Y'   TO S-ALPHABET-FOUND                          
		         	END-IF                                    
				END-PERFORM
				*>Convert input to upper case
				MOVE FUNCTION UPPER-CASE(GET-LINE) TO IN-LINE 
				CALL "conv" USING In-Line, W-SUB
				 		END-READ
	      		END-PERFORM
				CLOSE INPUT-FILE
			
			*>Case for normal input
			END-IF
			IF ISFILE IS EQUAL TO 0
				*>Convert to uppercase
				MOVE FUNCTION UPPER-CASE(GET-LINE) TO IN-LINE 

				CALL "conv" USING In-Line, W-SUB
			END-IF
	END-PERFORM.
